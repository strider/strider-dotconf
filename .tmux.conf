###########################
#  Configuration
###########################

# Default shell
set -g default-command /bin/zsh

# UTF8 support
set -g status on

set -g set-titles on
set-option -g set-titles-string '#{pane_current_command}'

# use 256 term for pretty colors
set -g default-terminal "screen-256color"

# increase scroll-back history
set -g history-limit 1000000

# prevent program window renaming trigger
set-option -g allow-rename off

# Use Vi style key bindings to move around command line mode
set-option -g status-keys vi

# use vim key bindings
setw -g mode-keys vi

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# disable mouse
setw -g mouse off

# decrease command delay (increases vim responsiveness)
set -sg escape-time 0

# increase repeat time for repeatable commands
set -g repeat-time 125

# start window index at 1
set -g base-index 1

# start pane index at 1
setw -g pane-base-index 1

# highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# re-number windows when one is closed
set -g renumber-windows on

###########################
#  Key Bindings
###########################

bind-key / command-prompt "split-window 'exec man %%'"
bind-key S command-prompt "new-window -n %1 'ssh %1'"

bind C-l send-keys 'C-l'

# tmux prefix
unbind C-b
set -g prefix C-a
# we might need ` at some point, allow switching
#bind-key C-a set-option -g prefix C-a
#bind-key C-b set-option -g prefix `

# copy with 'enter' or 'y' and send to mac os clipboard: http://goo.gl/2Bfn8
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# create 'v' alias for selecting text
bind-key -t vi-copy v begin-selection

# paste
unbind C-p
bind C-p paste-buffer

bind Escape copy-mode

# window splitting
bind-key v split-window -h
bind-key s split-window -v

# vim / xmonad style bindings for pane movement
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits
bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-h" "select-pane -L"
bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-j" "select-pane -D"
bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-k" "select-pane -U"
bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-l" "select-pane -R"
bind -n "C-\\" if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-\\" "select-pane -l"

# Bring back clear screen under tmux prefix
bind C-l send-keys 'C-l'

# create 25% lower split
unbind t
bind t split-window -p 25

# quickly switch panes
#unbind ^J
#bind ^J select-pane -t :.+

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

###########################
# Status Bar
###########################
# set refresh interval for status bar
set -g status-interval 30

source-file "${HOME}/.tmux-themepack/powerline/double/yellow.tmuxtheme"
